# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    # branches: [ master ]
    tags: [ v* ]
  # pull_request:
  #   branches: [ master ]
env:
  tf_version: '0.13.0'
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      # Clone terraform repo at the correct ref
      - name: Clone terraform repo
        uses: actions/checkout@v2
        with:
          # Repository name with owner. For example, actions/checkout
          # Default: ${{ github.repository }}
          repository: 'hashicorp/terraform'

          # The branch, tag or SHA to checkout. When checking out the repository that
          # triggered a workflow, this defaults to the reference or SHA for that event.
          # Otherwise, uses the default branch.
          ref: v${{ env.tf_version }}
          path: 'terraform'

      - name: Setup go
        uses: actions/setup-go@v2
        with:
          go-version: '1.15.2'

      # Runs a single command using the runners shell
      - name: List root
        run: ls -al
        
      - name: List terraform directory
        working-directory: terraform
        run: ls -al

      # Runs a single command using the runners shell
      - name: Install terraform bundle
        working-directory: terraform
        run: go install ./tools/terraform-bundle

      - name: Download artifactory provider
        run: wget https://github.com/atlassian/terraform-provider-artifactory/releases/download/v2.1.0/terraform-provider-artifactory_2.1.0_linux_x86_64.tar.gz
  
      - name: Extract artifactory plugin
        run: |
             mkdir ./plugins
             tar -xzvf terraform-provider-artifactory_2.1.0_linux_x86_64.tar.gz -C ./plugins

      - name: Rename artifactory plugin
        run: mkdir -p ./.plugins/github.com/atlassian/artifactory/2.1.0/linux_amd64; mv ./plugins/terraform-provider-artifactory $_

      - name: Download Octopus Deploy provider
        run: wget https://github.com/OctopusDeploy/terraform-provider-octopusdeploy/releases/download/v0.5.0/terraform-provider-octopusdeploy_linux_amd64_v0.5.0.zip

      - name: Extract Octopus Deploy plugin
        run:  unzip terraform-provider-octopusdeploy_linux_amd64_v0.5.0.zip -d ./plugins

      - name: Rename and move Octopus Deploy plugin
        run: mkdir -p ./.plugins/github.com/octopusdeploy/octopusdeploy/0.5.0/linux_amd64; mv ./plugins/terraform-provider-octopusdeploy_linux_amd64_v0.5.0 $_/terraform-provider-octopusdeploy

      # Runs a set of commands using the runners shell
      - name: Output date
        run: terraform-bundle package -os=linux -arch=amd64 terraform-bundle.hcl
      - name: Date
        id: date
        run: echo "::set-output name=date::$(date +'%Y%m%d%H')"

      - name: List root directory
        run: ls -al

      - name: Write checksum
        run: (shasum -a 256 < terraform_${{ env.tf_version }}-bundle${{ steps.date.outputs.date }}_linux_amd64.zip) > checksums.txt
 
      - name: Publish Release
        uses: actions/create-release@v1
        id:   create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./terraform_${{ env.tf_version }}-bundle${{ steps.date.outputs.date }}_linux_amd64.zip
          asset_name: terraform_${{ env.tf_version }}-bundle${{ steps.date.outputs.date }}_linux_amd64.zip
          asset_content_type: application/zip
      - name: Upload Release Asset
        id: upload-checksums-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./checksums.txt
          asset_name: checksums.txt
          asset_content_type: text/plain
